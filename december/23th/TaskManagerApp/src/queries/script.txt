CREATE DATABASE task_manager_app_db;
USE task_manager_app_db;

CREATE TABLE "user" (
    id BIGSERIAL,
    login CHARACTER VARYING(30) NOT NULL,
    email CHARACTER VARYING(30) NOT NULL,
    password CHARACTER VARYING(30) NOT NULL,
    UNIQUE (login),
    UNIQUE (email),
    PRIMARY KEY (id)
);

CREATE TABLE task_category (
    id BIGSERIAL,
    "name" CHARACTER VARYING(30) NOT NULL,
    UNIQUE ("name"),
    PRIMARY KEY (id)
);

CREATE TABLE task (
    id BIGSERIAL,
    "name" CHARACTER VARYING(30) NOT NULL,
    task_category_id BIGINT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (task_category_id) REFERENCES task_category (id)
);

CREATE TABLE project (
    id BIGSERIAL,
    "name" CHARACTER VARYING(30) NOT NULL,
    key CHARACTER VARYING(30) NOT NULL,
    UNIQUE (key),
    PRIMARY KEY (id)
);

CREATE TABLE task_details (
    id BIGSERIAL,
    project_id BIGINT NOT NULL,
    task_id BIGINT,
    author BIGINT NOT NULL,
    executor BIGINT,
    UNIQUE (project_id, task_id),
    PRIMARY KEY (id),
    FOREIGN KEY (project_id) REFERENCES project (id),
    FOREIGN KEY (task_id) REFERENCES task (id) ON DELETE CASCADE,
    FOREIGN KEY (author) REFERENCES "user" (id),
    FOREIGN KEY (executor) REFERENCES "user" (id) ON DELETE SET NULL
);

INSERT INTO task_category ("name") VALUES
('To do'),
('In progress'),
('Done');

CREATE OR REPLACE FUNCTION delete_user(id_user BIGINT) RETURNS BOOLEAN AS $$
    DECLARE
        _rec RECORD;
    BEGIN

        FOR _rec IN
            SELECT * FROM task_details WHERE author = $1
        LOOP
            DELETE FROM project WHERE "id" = _rec.project_id;
            DELETE FROM task WHERE "id" = _rec.task_id;
            DELETE FROM task_details WHERE "id" = _rec."id";
        END LOOP;

        DELETE FROM "user" WHERE "id" = $1;

        RETURN FOUND;
    END;
$$ LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION save_project(project_name CHARACTER VARYING, project_key CHARACTER VARYING, author_id BIGINT) RETURNS BOOLEAN AS $$
    DECLARE
        pr_id BIGINT;
    BEGIN 
        INSERT INTO project ("name", "key") VALUES ($1, $2) RETURNING "id" INTO pr_id;
        INSERT INTO task_details (project_id, author) VALUES (pr_id, $3);

        RETURN FOUND;
    END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION delete_project(id_project BIGINT) RETURNS BOOLEAN AS $$
    DECLARE
        _rec RECORD;
    BEGIN

        FOR _rec IN
            SELECT * FROM task_details WHERE project_id = $1
        LOOP
            DELETE FROM task WHERE "id" = _rec.task_id;
            DELETE FROM task_details WHERE "id" = _rec."id";
        END LOOP;

        DELETE FROM project WHERE "id" = $1;

        RETURN FOUND;
    END;
$$ LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION create_task(task_name CHARACTER VARYING, id_task_category BIGINT, id_project BIGINT, author_id BIGINT) RETURNS BOOLEAN AS $$
    DECLARE
        id_task BIGINT;
        selected_task_details task_details%ROWTYPE;   
    BEGIN 
        INSERT INTO task ("name", task_category_id) VALUES ($1, $2) RETURNING "id" INTO id_task;
        SELECT "id" FROM task_details INTO selected_task_details WHERE project_id = $3 AND task_id IS NULL LIMIT 1;
        IF selected_task_details IS NULL THEN
            INSERT INTO task_details (project_id, task_id, author) VALUES ($3, id_task, $4);
        ELSE
            UPDATE task_details SET task_id = id_task WHERE "id" = selected_task_details."id";
        END IF;
        RETURN FOUND;
    END;
$$ LANGUAGE 'plpgsql';



